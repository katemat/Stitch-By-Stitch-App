CREATE DATABASE stitch_by_stitch;

CREATE TABLE users(
    id SERIAL PRIMARY KEY,
    name TEXT,
    email TEXT,
    password_digest TEXT
);

CREATE TABLE projects(
    id SERIAL PRIMARY KEY,
    title TEXT,
    design TEXT,
    size TEXT,
    colors INTEGER,
    fabric_count INTEGER,
    start DATE,
    finish DATE, 
    details TEXT,
    main_image_url TEXT
    -- slide_images_url TEXT []
);

ALTER TABLE projects ADD COLUMN user_id INTEGER;
ALTER TABLE images DROP COLUMN image_arr;
ALTER TABLE images ADD COLUMN image_url TEXT;

CREATE TABLE images(
    image_arr TEXT [],
    project_id INTEGER
);

INSERT INTO images (image_arr, project_id) VALUES ('{  "https://i.etsystatic.com/15987569/r/il/153773/1881554276/il_794xN.1881554276_3wv5.jpg", "https://i.etsystatic.com/15987569/r/il/3f159a/1881553312/il_794xN.1881553312_t2k8.jpg", "https://i.etsystatic.com/15987569/r/il/3f159a/1881553312/il_794xN.1881553312_t2k8.jpg", "https://i.etsystatic.com/15987569/r/il/6c46e2/1929089953/il_794xN.1929089953_9w0o.jpg",  "https://i.etsystatic.com/15987569/r/il/96f96d/1881553598/il_794xN.1881553598_fyay.jpg"}', 1);


require 'cloudinary'
require 'cloudinary/uploader'
require 'cloudinary/utils'

<div class="file-input-container">
        <input  type="file" id="file" name="file" accept="image/*">
        <label class ="upload-label" for= "file">
        <i class="material-icons">
            add_photo_alternate
        </i> &nbsp;
        Choose a photo
        </label>
    </div>

    
def upload_listing_image(file_path,user_id,post_date)
    uploads = {}
    # public_id for the uploaded image is generated by Cloudinary's service.
    uploads[:cover_image] = Cloudinary::Uploader.upload "#{file_path}",
    :tags => "basic_sample",
    :public_id => "cover_#{user_id}_#{post_date}"

    uploads[:cover_image]['url']
        # uploads.each_value.with_index do |upload, index|
        #      puts "> Upload \##{index+1}:"
        #      puts "  Public ID: #{upload['public_id']}"
        #      puts "  URL: #{upload['url']}"
        #  end
end


<form action="/sign_up" method="post" enctype="multipart/form-data">
    <label for="">avatar</label>
    <input type="file" name="avatar">
    <button>sign up</button>
  </form>
  server with params[:avatar][:tempfile]

  def create_listing(headline, description, user_id, suburb, post_date,price, img_path)
    img_url = upload_listing_image(img_path, user_id, post_date)
    run_sql("insert into listings(headline,description,user_id,suburb,post_date,price,img_url)values ($1, $2, $3, $4, $5,$6,$7);",[headline, description,user_id,suburb,post_date,price,img_url])
end

def update_listing(id, headline, description,suburb,price,img_path,user_id)
    post_date = find_a_listing_by_id(id)["post_date"]
    img_url = upload_listing_image(img_path, user_id, post_date)
    run_sql("update listings set headline = $1, description = $2,suburb = $3, price = $4 , img_url = $5 where id = $6;",[headline,description,suburb,price,img_url,id])
end

def all_listings_by_query(search,sort_query)
    search_string = "%#{search}%"  
    listings = run_sql("select * from listings where headline like $1 order by #{sort_query};",[search_string])
    listings
end
def all_listings_for_user_by_query(user_id,search,sort_query)
    search_string = "%#{search}%"  
    listings = run_sql("select * from listings where user_id = $1 and headline like $2 order by #{sort_query};",[user_id,search_string])
    listings
end

def all_listings_by_suburb(search,suburb_order)
    search_string = "%#{search}%"
    suburb_string = "suburb #{suburb_order}"
    listings = run_sql("select * from listings where headline like $1 order by #{suburb_string};",[search_string])
    listings
end